
let result1 = $.ajax(
    {
        async : true, // 동기, 비동기를 나타냄.  // asyunc 비동기 값은 : true  => // if false => 동기 방식 (순차처리) 
        //. 이 함수가 끝나고 나서 이후 동작. => 따라서 수행시 보여지는 화면이 실행할 때마다 흰배경 처리후 결과값 반환.
        // 따라서 대부분 비동기 수행.
        //
        url : 'hoho',
        type :'get',
        success : function(){
            // ajax 호출이 끝났을 떄 성공이냐 실패를 수행 후 헤당 위치에서 동작
            // => 따라서 ruturn의 의미는 없음. => success에서 결과값이 반환.


            // 1분 뒤에 호출될지. 2분뒤에 호출될지. => 아무도 모름.
        },
    }
    
    
); 


let result2 = $.ajax(
    {
        url : 'haha',
        type :'get',
        success : function(){
            // ajax 호출이 끝났을 떄 성공이냐 실패를 수행 후 헤당 위치에서 동작
            // => 따라서 ruturn의 의미는 없음. => success에서 결과값이 반환.


            // 1분 뒤에 호출될지. 2분뒤에 호출될지. => 아무도 모름.
        }
    }
    
    
); 
// 이안의 내용을 가지고 서버쪽 요청, => json, server에 내용 전달.
//ajax 호출을 해서 서버쪽 프로그램이 실행되고, 그 결과 우리에게 json으로 보내지게 됨, 당연히 시간이 걸림.
// 그 시간을 기다지 않음 => ajax 호출 후 바로 반환 수행 (원래 json을 가지고 수행하는 것이라 생각 하지만 실제로는 그러지 않음)
// 그래서 ajax() 호출은 바로 리턴 됨 = > 당연히 리턴되는 값는 ajax()의 결과 값이 아님.
// nonblocking 특징.
// 그러면 결과를 어떻게 받는지? => event driven 방식으로 결과 받음. => 이벤트를 발생 시켜 해당 이벤트 콜백으로 통해 반환.



// 동기 -result1 수행후 바로 result2 
// 비동기 - result1 or result2 누가 먼저 수행되는지 보장하지 않음.




// let a = alert('경고창'); -> 굳이 변수에 저장해서 결과값을 받아올 필요는 없음. 

alert('경고창'); // 기본적인 재장함수// 대표적인 blocking 함수작업이 끝날때 까지 (return)될 까지
// 함수를 호출한 곳에서 프로그램의 수행이 일시 중지되는 함수.